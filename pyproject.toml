[tool.poetry]
name = "code-challenge"
version = "0.1.0"
description = ""
authors = ["Ester Beltrami <beltrami.ester@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.0.6"
django-environ = "^0.11.2"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
factory-boy = "^3.3.0"
pytest-factoryboy = "^2.7.0"
pytest-xdist = "^3.6.1"
pytest-icdiff = "^0.9"
pytest-django = "^4.8.0"

[tool.poetry.group.linters.dependencies]
ruff = "^0.4.4"
pre-commit = "^3.7.1"

[tool.ruff]
line-length = 88
target-version = "py312"
extend-exclude = ["migrations", "venv", "__pycache__", ".tox", "docs"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle warnings
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C9", # McCabe complexity
    "T20", # flake8-print
    "PT", # flake8-pytest-style

]

[tool.pytest.ini_options]
# @link https://pytest-django.readthedocs.io/en/latest/usage.html
DJANGO_SETTINGS_MODULE = "challenge.settings.test"
addopts = "-l -s -vv --cov=challenge --cov-report=term --cov-report=html --no-cov-on-fail "
testpaths = ["challenge/*/tests/**/*.py"]

[tool.coverage.run]
branch = true
omit = ["*/migrations/*", "*/tests/*", "*/test_*.py", "*__init__.py", "*venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
disallow_untyped_defs = true
warn_unused_ignores = true
warn_return_any = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
